<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.whaley.datawarehouse.illidan.common.mapper.owner.OwnerMapper">

    <!--The user defined SQL!-->


    <!--The user defined SQL!-->

    <sql id="updateSql">
        update owner owner
        <set>
            <if test="owner.ownerName != null">
                ownerName = #{owner.ownerName},
            </if>
            <if test="owner.ownerDes != null">
                ownerDes = #{owner.ownerDes},
            </if>
            <if test="owner.ownerPassword != null">
                ownerPassword = #{owner.ownerPassword},
            </if>
            <if test="owner.status != null">
                status = #{owner.status},
            </if>
            <if test="owner.isAdmin != null">
                isAdmin = #{owner.isAdmin},
            </if>
            <if test="owner.createTime != null">
                createTime = #{owner.createTime},
            </if>
            <if test="owner.updateTime != null">
                updateTime = #{owner.updateTime},
            </if>

        </set>
    </sql>

    <sql id="joinTables">
    </sql>

    <sql id="colList">
        <trim prefix="" prefixOverrides=",">
            , owner.ownerName AS ownerName
            , owner.ownerDes AS ownerDes
            , owner.ownerPassword AS ownerPassword
            , owner.status AS status
            , owner.isAdmin AS isAdmin
            , owner.createTime AS createTime
            , owner.updateTime AS updateTime
            , owner.id AS id

        </trim>
    </sql>

    <sql id="whereCase">
        <where>
            owner.status = '1'
            <if test="owner != null and owner.id != null">and owner.id = #{owner.id}</if>
            <if test="owner != null and owner.idGT != null">and owner.id > #{owner.idGT}</if><if test="idLT != null">and #{idLT} > owner.id</if>
            <if test="owner != null and owner.ownerName != null">and owner.ownerName = #{owner.ownerName}</if>
            <if test="owner != null and owner.ownerNameLK != null">and owner.ownerName LIKE #{owner.ownerNameLK}</if>
            <if test="owner != null and owner.ownerDes != null">and owner.ownerDes = #{owner.ownerDes}</if>
            <if test="owner != null and owner.ownerDesLK != null">and owner.ownerDes LIKE #{owner.ownerDesLK}</if>
            <if test="owner != null and owner.createTime != null">and owner.createTime = #{owner.createTime}</if>
            <if test="owner != null and owner.updateTime != null">and owner.updateTime = #{owner.updateTime}</if>
            <if test="owner != null and owner.ownerPassword != null">and owner.ownerPassword = #{owner.ownerPassword}</if>
            <if test="owner != null and owner.ownerPasswordLK != null">and owner.ownerPassword LIKE #{owner.ownerPasswordLK}</if>
            <if test="owner != null and owner.isAdmin != null">and owner.isAdmin = #{owner.isAdmin}</if>
            <if test="owner != null and owner.isAdminLK != null">and owner.isAdmin LIKE #{owner.isAdminLK}</if>

        </where>
    </sql>

    <sql id="smallWhereCase">
        <where>
            owner.status = '1'
            <if test="owner != null and owner.id != null">and owner.id = #{owner.id}</if>
            <if test="owner != null and owner.ownerName != null">and owner.ownerName = #{owner.ownerName}</if>
            <if test="owner != null and owner.ownerDes != null">and owner.ownerDes = #{owner.ownerDes}</if>
            <if test="owner != null and owner.createTime != null">and owner.createTime = #{owner.createTime}</if>
            <if test="owner != null and owner.updateTime != null">and owner.updateTime = #{owner.updateTime}</if>
            <if test="owner != null and owner.ownerPassword != null">and owner.ownerPassword = #{owner.ownerPassword}</if>
            <if test="owner != null and owner.isAdmin != null">and owner.isAdmin = #{owner.isAdmin}</if>
        </where>
    </sql>

    <resultMap id="returnOwner" type="cn.whaley.datawarehouse.illidan.common.domain.owner.Owner">
        <id column="id" javaType="Long" jdbcType="BIGINT" property="id"/>
        <result column="ownerName" javaType="String" jdbcType="VARCHAR" property="ownerName"/>
        <result column="ownerDes" javaType="String" jdbcType="VARCHAR" property="ownerDes"/>
        <result column="createTime" javaType="Date" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="updateTime" javaType="Date" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="isAdmin" javaType="String" jdbcType="VARCHAR" property="isAdmin"/>
        <result column="ownerPassword" javaType="String" jdbcType="VARCHAR" property="ownerPassword"/>

    </resultMap>

    <select id="get"  resultMap="returnOwner">
        select * from owner owner where owner.status = '1' AND owner.id = #{id}
    </select>

    <update id="update">
        <include refid="updateSql"/>
        <include refid="whereCase"/>
    </update>

    <insert id="insertBatch" >
        insert into owner
        (
        <trim prefix="" prefixOverrides=",">
            ,ownerCode,ownerDes,createTime,updateTime,ownerId,status
        </trim>
        ) values
        <foreach collection="list" item="item" index="index" separator=",">
            (
            <trim prefix="" prefixOverrides=",">
                ,#{ownerCode} ,#{ownerDes} ,#{createTime} ,#{updateTime} ,#{ownerId} ,#{status}
            </trim>
            )
        </foreach>
    </insert>

    <insert id="insert" parameterType="Owner">
        <selectKey resultType="long" keyProperty="id" order="AFTER">
            SELECT
            LAST_INSERT_ID()
        </selectKey>
        insert into owner
        (
        <trim prefix="" prefixOverrides=",">
            ,ownerCode,ownerDes,createTime,updateTime,ownerId,status
        </trim>
        )values(
        <trim prefix="" prefixOverrides=",">
            ,#{owner.ownerCode},#{owner.ownerDes},#{owner.createTime},#{owner.updateTime},#{owner.ownerId},#{owner.status}
        </trim>
        )
    </insert>

    <delete id="remove" >
        <!--delete owner from owner owner <include refid="whereCase"/>-->
        UPDATE owner owner SET owner.status = '0' <include refid="whereCase"/>
    </delete>

    <select id="find"  resultMap="returnOwner">
        select <include refid="colList" /> from owner owner
        <include refid="joinTables"/>
        <include refid="smallWhereCase"/>
        <if test="owner != null and owner.orderBy != null">order by #{owner.orderBy}</if>
        <if test="owner != null and owner.limitStart != null and owner.limitEnd != null">limit #{owner.limitStart}, #{owner.limitEnd}</if>
    </select>

    <select id="count"  resultType="long">
        select count(1) from owner owner
        <include refid="joinTables"/>
        <include refid="smallWhereCase"/>
    </select>

    <update id="updateByOwner" >
        <include refid="updateSql"/>
        <include refid="smallWhereCase"/>
    </update>

    <update id="updateById">
        <include refid="updateSql"/>
        where status = '1' and id = #{owner.id}
    </update>

    <delete id="removeByOwner">
        <!--delete from owner owner <include refid="smallWhereCase"/>-->
        UPDATE owner owner SET owner.status = '0' <include refid="smallWhereCase"/>
    </delete>

    <select id="findByOwner" resultMap="returnOwner">
        select <include refid="colList" /> from owner owner
        <include refid="joinTables"/>
        <include refid="smallWhereCase"/>
        order by owner.updateTime desc
        <!--<if test="owner != null and owner.orderBy != null">order by #{owner.orderBy}</if>-->
        <if test="owner != null and owner.limitStart != null and owner.limitEnd != null">limit #{owner.limitStart}, #{owner.limitEnd}</if>
    </select>

    <select id="countByOwner"  resultType="long">
        select count(1) from owner owner
        <include refid="joinTables"/>
        <include refid="smallWhereCase"/>
    </select>

    <select id="isExistOwner"  resultType="long">
        select count(1) from owner owner
        where status = #{status} and (ownerCode=#{ownerCode})
    </select>

    <delete id="removeByIds">
        <!--delete from owner where status = '1' and id in
        <foreach item="item" collection="ids" open="(" separator="," close=")" >
            #{item}
        </foreach>-->

        UPDATE owner SET status = '0' where status = '1' and id in
        <foreach item="item" collection="ids" open="(" separator="," close=")" >
            #{item}
        </foreach>
    </delete>

    <select id="getByCodeLike"  resultMap="returnOwner">
        select <include refid="colList" /> from owner owner where owner.status = '1' AND owner.ownerCode like concat('%',#{ownerCode},'%') limit 10
    </select>
</mapper>